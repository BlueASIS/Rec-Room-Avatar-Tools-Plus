bl_info = {
    "name": "Rec Room Avatar Tools+",
    "author": "blueasis",
    "version": (0, 0, 1),
    "blender": (3, 0, 0),
    "location": "View3D > Sidebar > RR Avatar Tools+, Outliner Right-Click Menu",
    "description": "RR Avatar Tools QoL Features",
    "category": "Object",
}

import bpy


class OBJECT_OT_generate_lods(bpy.types.Operator):
    """Duplicate selected object into LOD1 and LOD2, decimate LOD2"""
    bl_idname = "object.generate_lods"
    bl_label = "Generate LOD1 & LOD2"
    bl_options = {'REGISTER', 'UNDO'}

    decimate_ratio: bpy.props.FloatProperty(
        name="LOD2 Decimate Ratio",
        description="Decimation ratio for LOD2 mesh",
        default=0.25,
        min=0.0,
        max=1.0
    )

    def execute(self, context):
        obj = context.active_object

        if not obj:
            self.report({'ERROR'}, "No object selected.")
            return {'CANCELLED'}

        # --- Ensure name ends with LOD0 ---
        if "LOD0" not in obj.name:
            obj.name = f"{obj.name}_LOD0"
            self.report({'INFO'}, f"Renamed object to {obj.name} (added _LOD0)")

        base_name = obj.name.replace("LOD0", "")
        lod1_name = f"{base_name}LOD1"
        lod2_name = f"{base_name}LOD2"

        # Duplicate LOD0 → LOD1
        bpy.ops.object.duplicate()
        lod1 = context.active_object
        lod1.name = lod1_name

        # Duplicate LOD1 → LOD2
        bpy.ops.object.duplicate()
        lod2 = context.active_object
        lod2.name = lod2_name

        # Add decimate modifier to LOD2
        dec = lod2.modifiers.new(name="Decimate_LOD2", type='DECIMATE')
        dec.ratio = self.decimate_ratio

        # Apply decimate modifier
        bpy.ops.object.modifier_apply(modifier=dec.name)

        self.report({'INFO'}, f"Created {lod1_name} and {lod2_name} (LOD2 decimated {self.decimate_ratio})")
        return {'FINISHED'}


class VIEW3D_PT_lod_tools(bpy.types.Panel):
    """Creates a panel in the 3D Viewport Sidebar"""
    bl_label = "RR Avatar Tools+"
    bl_idname = "VIEW3D_PT_lod_tools"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = "Rec Room Avatar Tools"

    def draw(self, context):
        layout = self.layout
        layout.operator("object.generate_lods", icon='MESH_DATA')


# --- OUTLINER CONTEXT MENU INTEGRATION ---

def lod_tools_outliner_menu(self, context):
    layout = self.layout
    layout.separator()
    layout.operator("object.generate_lods", icon="MESH_DATA", text="Generate LOD1 & LOD2")


# Registration
classes = (
    OBJECT_OT_generate_lods,
    VIEW3D_PT_lod_tools,
)

def register():
    for cls in classes:
        bpy.utils.register_class(cls)

    # Add operator to Outliner context menu
    bpy.types.OUTLINER_MT_object.append(lod_tools_outliner_menu)


def unregister():
    # Remove operator from Outliner context menu
    bpy.types.OUTLINER_MT_object.remove(lod_tools_outliner_menu)

    for cls in reversed(classes):
        bpy.utils.unregister_class(cls)


if __name__ == "__main__":
    register()
